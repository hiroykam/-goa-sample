// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "goa-sample": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/hiroykam/goa-sample/design
// --out=$(GOPATH)/src/github.com/hiroykam/goa-sample
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// AddSamplesContext provides the samples add action context.
type AddSamplesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AddSamplesPayload
}

// NewAddSamplesContext parses the incoming request URL and body, performs validations and creates the
// context used by the samples controller add action.
func NewAddSamplesContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddSamplesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddSamplesContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// addSamplesPayload is the samples add action payload.
type addSamplesPayload struct {
	// detail of sample
	Detail *string `form:"detail,omitempty" json:"detail,omitempty" yaml:"detail,omitempty" xml:"detail,omitempty"`
	// name of sample
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	// user id
	UserID *int `form:"user_id,omitempty" json:"user_id,omitempty" yaml:"user_id,omitempty" xml:"user_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *addSamplesPayload) Validate() (err error) {
	if payload.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user_id"))
	}
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Detail == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "detail"))
	}
	return
}

// Publicize creates AddSamplesPayload from addSamplesPayload
func (payload *addSamplesPayload) Publicize() *AddSamplesPayload {
	var pub AddSamplesPayload
	if payload.Detail != nil {
		pub.Detail = *payload.Detail
	}
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	if payload.UserID != nil {
		pub.UserID = *payload.UserID
	}
	return &pub
}

// AddSamplesPayload is the samples add action payload.
type AddSamplesPayload struct {
	// detail of sample
	Detail string `form:"detail" json:"detail" yaml:"detail" xml:"detail"`
	// name of sample
	Name string `form:"name" json:"name" yaml:"name" xml:"name"`
	// user id
	UserID int `form:"user_id" json:"user_id" yaml:"user_id" xml:"user_id"`
}

// Validate runs the validation rules defined in the design.
func (payload *AddSamplesPayload) Validate() (err error) {

	if payload.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Detail == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "detail"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *AddSamplesContext) OK(r *Sample) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.sample+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddSamplesContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *AddSamplesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// DeleteSamplesContext provides the samples delete action context.
type DeleteSamplesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewDeleteSamplesContext parses the incoming request URL and body, performs validations and creates the
// context used by the samples controller delete action.
func NewDeleteSamplesContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteSamplesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteSamplesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteSamplesContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteSamplesContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteSamplesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListSamplesContext provides the samples list action context.
type ListSamplesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewListSamplesContext parses the incoming request URL and body, performs validations and creates the
// context used by the samples controller list action.
func NewListSamplesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListSamplesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListSamplesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("user_id"))
	} else {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user_id", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListSamplesContext) OK(r SamplesCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.samples+json; type=collection")
	}
	if r == nil {
		r = SamplesCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListSamplesContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListSamplesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowSamplesContext provides the samples show action context.
type ShowSamplesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewShowSamplesContext parses the incoming request URL and body, performs validations and creates the
// context used by the samples controller show action.
func NewShowSamplesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowSamplesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowSamplesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowSamplesContext) OK(r *Sample) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.sample+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowSamplesContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowSamplesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdateSamplesContext provides the samples update action context.
type UpdateSamplesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID      int
	Payload *UpdateSamplesPayload
}

// NewUpdateSamplesContext parses the incoming request URL and body, performs validations and creates the
// context used by the samples controller update action.
func NewUpdateSamplesContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateSamplesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateSamplesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// updateSamplesPayload is the samples update action payload.
type updateSamplesPayload struct {
	// detail of sample
	Detail *string `form:"detail,omitempty" json:"detail,omitempty" yaml:"detail,omitempty" xml:"detail,omitempty"`
	// name of sample
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	// name of sample
	UserID *int `form:"user_id,omitempty" json:"user_id,omitempty" yaml:"user_id,omitempty" xml:"user_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateSamplesPayload) Validate() (err error) {
	if payload.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user_id"))
	}
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Detail == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "detail"))
	}
	return
}

// Publicize creates UpdateSamplesPayload from updateSamplesPayload
func (payload *updateSamplesPayload) Publicize() *UpdateSamplesPayload {
	var pub UpdateSamplesPayload
	if payload.Detail != nil {
		pub.Detail = *payload.Detail
	}
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	if payload.UserID != nil {
		pub.UserID = *payload.UserID
	}
	return &pub
}

// UpdateSamplesPayload is the samples update action payload.
type UpdateSamplesPayload struct {
	// detail of sample
	Detail string `form:"detail" json:"detail" yaml:"detail" xml:"detail"`
	// name of sample
	Name string `form:"name" json:"name" yaml:"name" xml:"name"`
	// name of sample
	UserID int `form:"user_id" json:"user_id" yaml:"user_id" xml:"user_id"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateSamplesPayload) Validate() (err error) {

	if payload.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Detail == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "detail"))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateSamplesContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateSamplesContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateSamplesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
