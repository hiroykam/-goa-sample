// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "goa-sample": samples Resource Client
//
// Command:
// $ goagen
// --design=github.com/hiroykam/goa-sample/design
// --out=$(GOPATH)/src/github.com/hiroykam/goa-sample
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"mime/multipart"
	"net/http"
	"net/url"
	"strconv"
)

// AddSamplesPayload is the samples add action payload.
type AddSamplesPayload struct {
	// detail of sample
	Detail string `form:"detail" json:"detail" yaml:"detail" xml:"detail"`
	// name of sample
	Name string `form:"name" json:"name" yaml:"name" xml:"name"`
	// user id
	UserID string `form:"user_id" json:"user_id" yaml:"user_id" xml:"user_id"`
}

// AddSamplesPath computes a request path to the add action of samples.
func AddSamplesPath() string {

	return fmt.Sprintf("/api/v1/samples/")
}

// 追加
func (c *Client) AddSamples(ctx context.Context, path string, payload *AddSamplesPayload) (*http.Response, error) {
	req, err := c.NewAddSamplesRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAddSamplesRequest create the request corresponding to the add action endpoint of the samples resource.
func (c *Client) NewAddSamplesRequest(ctx context.Context, path string, payload *AddSamplesPayload) (*http.Request, error) {
	var body bytes.Buffer
	w := multipart.NewWriter(&body)

	{
		fw, err := w.CreateFormField("detail")
		if err != nil {
			return nil, err
		}
		tmp_Detail := payload.Detail
		s := tmp_Detail
		if _, err := fw.Write([]byte(s)); err != nil {
			return nil, err
		}
	}
	{
		fw, err := w.CreateFormField("name")
		if err != nil {
			return nil, err
		}
		tmp_Name := payload.Name
		s := tmp_Name
		if _, err := fw.Write([]byte(s)); err != nil {
			return nil, err
		}
	}
	{
		fw, err := w.CreateFormField("user_id")
		if err != nil {
			return nil, err
		}
		tmp_UserID := payload.UserID
		s := tmp_UserID
		if _, err := fw.Write([]byte(s)); err != nil {
			return nil, err
		}
	}
	if err := w.Close(); err != nil {
		return nil, err
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", w.FormDataContentType())
	return req, nil
}

// DeleteSamplesPath computes a request path to the delete action of samples.
func DeleteSamplesPath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/api/v1/samples/%s", param0)
}

// 削除
func (c *Client) DeleteSamples(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteSamplesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteSamplesRequest create the request corresponding to the delete action endpoint of the samples resource.
func (c *Client) NewDeleteSamplesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListSamplesPath computes a request path to the list action of samples.
func ListSamplesPath() string {

	return fmt.Sprintf("/api/v1/samples/")
}

// 複数
func (c *Client) ListSamples(ctx context.Context, path string, userID *int) (*http.Response, error) {
	req, err := c.NewListSamplesRequest(ctx, path, userID)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListSamplesRequest create the request corresponding to the list action endpoint of the samples resource.
func (c *Client) NewListSamplesRequest(ctx context.Context, path string, userID *int) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if userID != nil {
		tmp6 := strconv.Itoa(*userID)
		values.Set("user_id", tmp6)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowSamplesPath computes a request path to the show action of samples.
func ShowSamplesPath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/api/v1/samples/%s", param0)
}

// 単数
func (c *Client) ShowSamples(ctx context.Context, path string, userID *int) (*http.Response, error) {
	req, err := c.NewShowSamplesRequest(ctx, path, userID)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowSamplesRequest create the request corresponding to the show action endpoint of the samples resource.
func (c *Client) NewShowSamplesRequest(ctx context.Context, path string, userID *int) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if userID != nil {
		tmp7 := strconv.Itoa(*userID)
		values.Set("user_id", tmp7)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateSamplesPayload is the samples update action payload.
type UpdateSamplesPayload struct {
	// detail of sample
	Detail string `form:"detail" json:"detail" yaml:"detail" xml:"detail"`
	// name of sample
	Name string `form:"name" json:"name" yaml:"name" xml:"name"`
}

// UpdateSamplesPath computes a request path to the update action of samples.
func UpdateSamplesPath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/api/v1/samples/%s", param0)
}

// 更新
func (c *Client) UpdateSamples(ctx context.Context, path string, payload *UpdateSamplesPayload) (*http.Response, error) {
	req, err := c.NewUpdateSamplesRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateSamplesRequest create the request corresponding to the update action endpoint of the samples resource.
func (c *Client) NewUpdateSamplesRequest(ctx context.Context, path string, payload *UpdateSamplesPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	return req, nil
}
